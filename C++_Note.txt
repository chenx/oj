- split function

  1) split with delimiter char.
  
    void split(string data, vector<string> &vals, char delim) {
        stringstream ss(data);
        string val;
        while (std::getline(ss, val, delim)) {
            vals.push_back(val);
        }
    }

  2) split with blank space.
  
    void split(string data, vector<string> &vals) {
        stringstream ss(data);
        string val;
        while (ss >> val) {
            vals.push_back(val);
        }
    }
    
    
- create priority queue

  1) int
  
  max heap: priority_queue<int, vector<int>, std::less<int>> maxPQ;
  min heap: priority_queue<int, vector<int>, std::greater<int>> minPQ;
  
  2) node
  
  priority_queue<ListNode *, vector<ListNode *>, comp> minPQ;
  
  class comp {
  public:    
      bool operator()(const ListNode * a, const ListNode * b) const {
          return a->val > b->val; // min heap.
      }
  };
  
  3) use make_heap
  
  vector<ListNode *> h;
  make_heap(h.begin(), h.end(), cmp);
  
  bool cmp(const ListNode * a, const ListNode * b) {
      return a->val > b->val;
  }
  
  
- create pair

  1) pair<int, int> v = pair<int, int>(1, 2);
  2) auto v = make_pair(1, 2); // note the use of auto keyword.
  

- convert int to string

  1) A quick way: std::to_string(type val)
  Type can be int, long, double etc. 
  
  See: http://www.cplusplus.com/reference/string/to_string/
  
  2) 
  
    int toInt(string s) {
        stringstream iss(s); // istringstream works too.
        int val;
        iss >> val;
        return val;
    }
    
  3) 
  
    int toInt(string s) {
        int val = 0, i = 0, val0;
        bool neg = s[0] == '-';
        if (neg) ++ i;
        else if (s[0] == '+') ++ i;
        
        for (; i < s.length(); ++ i) {
            val0 = val;
            val = val * 10 + s[i] - '0';
            if (val / 10 != val0) throw overflow_error();
        }
        
        if (neg) val = - val;
        return val;
    }
    
  
- convert string to int/long/long-long:

  std::stoi(string val)
  std::stol(stirng val)
  std::stoll(string val)
  
  See: http://en.cppreference.com/w/cpp/string/basic_string/stol


- Difference of stringstream, istringstream and ostringstream 

  Stringstream is bigger. The other two make code more readable.
  They can be interchangeable. 
  E.g., in the split functions above, replace stringstream with istringstream is ok too.
  
  
- keyword "auto" started in C++11.


- set/map/unordered_set/unordered_map contains a "count()" method to judge if an element exists.
  so instead of using: x.find(e) != x.end()
  one can now use: x.count(e) > 0
  
  
- string.length() type is: std::basic_string<char>::size_type
  so max or min(int, string.length()) will report error such as:
    no matching function for call to ‘min(int&, std::basic_string<char>::size_type)’
  so you need to do a cast here: min(int, (int) string.length())
  
  
- Some built-in functions (so no need to re-invent wheel):
  isspace, ispunct, isdigit, isalpha, isalnum, islower, isupper
  tolower, toupper
  
  See: http://www.cplusplus.com/reference/cctype/


- Multiset, lower_bound(), upper_bound(), std::distance().
  See implementation in https://github.com/chenx/oj/blob/master/leetcode/CountOfRangeSum.cpp


- Intialize vector
  In C++03: vector<int> v; v.push_back(1);
  In C++11: vector<int> v {1};
  
  See: http://www.informit.com/articles/article.aspx?p=1852519
  

- find substring in a string: string.find(string s, int start_pos);
  string s = "abcb";
  int pos = s.find("b", 0); // returns 1.
  pos = s.find("b", 1); // returns 1.
  pos = s.find("b", 2); // returns 3.
  pos = s.find("d", 0); // returns string::npos = 18446744073709551615
  
  See: http://www.cplusplus.com/reference/string/string/find/
  
  
- Return a string made of n repeated characters c:
  char c = 'a';
  int n = 3;
  string s = string(n, c);  // s = "aaa".
  

- Simple way to print a number in binary format.
  int n = 100;
  cout << bitset<8>(n) << endl;
  

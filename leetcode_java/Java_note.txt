-- String, char, int
String nString = "5";
char n = nString.charAt(0);
System.out.println(n - '0');
System.out.println(n - 48);
System.out.println(Character.getNumericValue(n));
System.out.println(new Integer(nString));
System.out.println(Integer.valueOf(nString));
System.out.println(Integer.parseInt(nString));
System.out.println(new BigInteger(nString)); 

// max/min integer:
Integer.MIN_VALUE
Integer.MAX_VALUE


-- length
array: int[] a = {1,2}; int len = a.length;
string: string s = "abc"; int len = s.length();
list: List<int> t = new ArrayList<int>(); int len = t.size();


-- String functions.
String s;
char[] s_array = s.toCharArray(); // convert to char array.
// substring: http://www.tutorialspoint.com/java/java_string_substring.htm
public String substring(int beginIndex)
public String substring(int beginIndex, int endIndex)

-- Initialize Array
http://mangstacular.blogspot.com/2013/04/4-ways-to-initialize-list-in-java.html

4 ways:

1)
List<String> list = Collections.emptyList();
2)
List<String> list = Arrays.asList("one", "two", "three");
3)
List<String> list = new ArrayList<String>(){{add("one"); add("two"); add("three");}}
4)
List<String> list = new ArrayList<String>();
list.add("one");
list.add("two");
list.add("three");

-- 4 ways you can iterate through List.
http://crunchify.com/how-to-iterate-through-java-list-4-way-to-iterate-through-loop/

package com.crunchify;
 
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
 
/**
 * @author Crunchify.com
 */
 
public class CrunchifyIterateThroughList {
 
	public static void main(String[] argv) {
 
		// create list 
		List<String> CrunchifyList = new ArrayList<String>();
 
		// add 4 different values to list
		CrunchifyList.add("eBay");
		CrunchifyList.add("Paypal");
		CrunchifyList.add("Google");
		CrunchifyList.add("Yahoo");
 
		// iterate via "for loop"
		System.out.println("==> For Loop Example.");
		for (int i = 0; i < CrunchifyList.size(); i++) {
			System.out.println(CrunchifyList.get(i));
		}
 
		// iterate via "New way to loop"
		System.out.println("\n==> Advance For Loop Example..");
		for (String temp : CrunchifyList) {
			System.out.println(temp);
		}
 
		// iterate via "iterator loop"
		System.out.println("\n==> Iterator Example...");
		Iterator<String> CrunchifyIterator = CrunchifyList.iterator();
		while (CrunchifyIterator.hasNext()) {
			System.out.println(CrunchifyIterator.next());
		}
 
		// iterate via "while loop"
		System.out.println("\n==> While Loop Example....");
		int i = 0;
		while (i < CrunchifyList.size()) {
			System.out.println(CrunchifyList.get(i));
			i++;
		}
	}
}


-- clone a list
http://stackoverflow.com/questions/54909/how-do-i-clone-a-generic-list-in-java

1)
List list = new ArrayList();
List list2 = ((List) ( (ArrayList) list).clone());
2)
public static <T extends Object> List<T> cloneList(List<T> list) {
    return ((List<T>) ((ArrayList<T>) list).clone());
}


-- Java List API
http://docs.oracle.com/javase/7/docs/api/java/util/List.html
http://docs.oracle.com/javase/tutorial/collections/interfaces/list.html


-- Java LinkedList
LinkedList v = new LinkedList<Long>();
v.add(new Long(2));
int first = v.getFirst();
v.removeFirst();

// Note, for int, must use LinkedList<Integer>.
-- Java LinkedList and others API
-- http://www.tutorialspoint.com/java/util/java_util_linkedlist.htm


// Convert list to array
List<Integer> coinsList = new ArrayList<Integer>(); // Use ArrayList<Integer> coinsList also works.
...
Integer[] coins = coinsList.toArray(new Integer[coinsList.size()]);


-- Sort list (with customized comparator)
List<Interval> intervals = new ArrayList<Interval>();
Collections.sort(intervals, new Comp());

class Comp implements Comparator<Interval> {
    @Override
    public int compare(Interval a, Interval b) {
        if (a.start == b.start) {
            if (a.end == b.end) return 0; // this is neede!
            return a.end < b.end ? -1 : 1;
        }
        return a.start < b.start ? -1 : 1;
    }
}


-- Java Queue
// http://docs.oracle.com/javase/7/docs/api/java/util/Queue.html
Queue<Integer> q = new LinkedList<Integer>();
boolean empty = q.isEmpty(); // true
q.add(1);
q.add(2);
int top = q.peek();
top = q.remove(); // return 1.

-- Java Stack
// http://docs.oracle.com/javase/7/docs/api/java/util/Stack.html
Stack<Integer> s = new Stack<Integer>();
boolean empty = s.isEmpty(); // true
empty = s.empty(); // true.
s.push(1);
int top = s.peek();
s.pop();

-- Java HashMap
// http://java67.blogspot.com/2013/02/10-examples-of-hashmap-in-java-programming-tutorial.html
HashMap<Integer, Integer> h = new HashMap<Integer, Integer>();
h.put(1, 3);
boolean exists = h.containsKey(1); // true
h.containsValue(2); // false
h.isEmpty(); // false
int value = h.get(1); // 3

Hashtable<Integer, Integer> source = new Hashtable<Integer,Integer>();
h = new HashMap(source);

// Iterate through.
Iterator<Integer> keySetIterator = h.keySet().iterator();
while(keySetIterator.hasNext()){
  Integer key = keySetIterator.next();
  System.out.println("key: " + key + " value: " + map.get(key));
}

h.size();
h.clear();

Integer key = 1;
Object value = h.remove(key); // key: 1

// sort
System.out.println("Unsorted HashMap: " + map);
TreeMap sortedHashMap = new TreeMap(map);     
System.out.println("Sorted HashMap: " + sortedHashMap); 



==========================
= C++ notes
==========================

-- convert string to int:
string s = "123";
istringstream iss(s);
int val;
iss >> val;
